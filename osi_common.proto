syntax = "proto2";

option optimize_for = SPEED;

package osi;


//
// \brief A cartesian 3D vector for positions, velocities or accelerations or its uncertainties.
// 
// Units are [m] for positions, [m/s] for velocities and [m/s^2] for accelerations.
//
// The coordinate system is defined as right-handed. 
//
message Vector3d
{
    // The x coordinate.
    //
    optional double x = 1;

    // The y coordinate.
    //
    optional double y = 2;

    // The z coordinate.
    //
    optional double z = 3;
}

//
// \brief A cartesian 2D vector for positions, velocities or accelerations or its uncertainties.
// 
// Units are [m] for positions, [m/s] for velocities and [m/s^2] for accelerations.
//
message Vector2d
{
    // The x coordinate.
    //
    optional double x = 1;

    // The y coordinate.
    //
    optional double y = 2;
}

//
// \brief A timestamp.
// 
// Names and types of fields are chosen in accordance to google/protobuf/timestamp.proto to allow a possible switch in the future. 
// There is no definition of the zero point in time neither it is the Unix epoch. 
// A simulation may start at the zero point in time but it is not mandatory.
//
message Timestamp
{
    // The number of seconds since the start of e.g. the simulation / system / vehicle. 
    // Unit: [s]
    optional int64 seconds = 1;

    // The number of nanoseconds since the start of the last second. 
    // Unit: [ns]
    optional int32 nanos = 2;
}

//
// \brief The dimension of a 3D box, e.g. the size of a 3D bounding box or its uncertainties.
// 
// Units are all [m].
//
// The dimensions are positive. Uncertainties are negative or positive.
//
// Dimension is defined in the specified reference coordinate frame along the
// x-axis (=length), y-axis (=width) and z-axis (=height). 
// 
message Dimension3d
{
    // The length of the box.
    //
    optional double length = 1;
    
    // The width of the box.
    //
    optional double width = 2;
    
    // The height of the box.
    //
    optional double height = 3;
}

//
// \brief A 3D orientation, orientation rate or orientation acceleration (i.e. derivatives)
// or its uncertainties denoted in euler angles.
// 
// Units are 
// \arg [rad] for orientation
// \arg [rad/s] for rates
// \arg [rad/s^2] for accelerations
// 
// The preferred angular range is (-pi, pi]. The coordinate system is defined as right-handed. 
//  
// The rotations are to be performed \b roll \b first, \b pitch \b second and \b yaw \b third to follow the definition according to [1]. 
// 
// Rotations are defined in the reference coordinate frame around z-axis (=yaw), y-axis (=pitch) and x-axis (=roll), 
// not in the body frame of the object. 
// A positive angle corresponds to a counter-clockwise rotation around the respective axis.
//
// Roll/Pitch are 0 if the objects xy-plane is parallel to its parent's xy-plane.
// Yaw is 0 if the object's local x-axis is parallel to its parent's x-axis.
//
// \par References: 
// [1] LAVALLE, Steven M. Planning algorithms. Cambridge university press, 2006. Chapter 3.2.3.
// See http://planning.cs.uiuc.edu/node102.html for online version of this chapter.
//
message Orientation3d
{
    // The roll angle/rate/acceleration.
    //
    optional double roll = 1;
    
    // The pitch angle/rate/acceleration.
    //
    optional double pitch = 2;
    
    // The yaw angle/rate/acceleration.
    //
    optional double yaw = 3;
}

//
// \brief A common identifier (ID), represented as an integer.
// 
// Has to be unique among all simulated items at any given time. For ground truth, the identifier of an item (object,
// lane, sign, etc.) must remain stable over its lifetime. Identifier values may be only be reused if the available
// address space is exhausted and the specific values have not been in use for several timesteps. Sensor specific
// tracking IDs have no restrictions and should behave according to the sensor specifications.
//
// The value MAX(uint64) = 2^(64) -1 = 0b1111111111111111111111111111111111111111111111111111111111111111 is reserved and 
// indicates an invalid ID or error.
//
message Identifier
{
    // The identifier's value.
    //
    optional uint64 value = 1;
}

//
// \brief Specifies the mounting position of a sensor. 
// 
// Details are specified in each instance where MountingPosition is used.
//
message MountingPosition
{
    // Offset position relative to the specified reference coordinate system.
    //
    optional Vector3d position = 1;

    // Orientation offset relative to the specified reference coordinate system.
    //
    optional Orientation3d orientation = 2;
}

//
// \brief A spherical representation for a point or vector in 3D space.
//
// Used e.g., for low level representations of radar detections.
// 
// Units are [m] for radial distance and [rad] for azimuth and elevation angles. 
// If azimuth and elevation are zero, the referenced point lies directly ahead
// in the central viewing direction of the sensor, and the respective vector points directly in the latter.
//
message Spherical3d
{
    // The radial distance.
    //
    optional double distance = 1;

    // The azimuth (horizontal) angle.
    //
    optional double azimuth = 2;

    // The elevation (vertical) angle.
    //
    optional double elevation = 3;
}

//
// \brief The base attributes of a stationary object or entity.
// 
// This includes the StationaryObject, TrafficSign, TrafficLight, RoadMarking messages.
//
message BaseStationary
{
    // The 3D dimensions of the stationary object (bounding box), e.g. a landmark:
    //
    optional Dimension3d dimension = 1;

    // The reference point for position and orientation, i.e. the center (x, y, z) of the bounding box.
    //
    optional Vector3d position = 2;

    // The relative orientation of the stationary object w.r.t. its parent frame.
    // There may be some constraints how to use orientation w.r.t. to some stationary object's or entity's definition.
    optional Orientation3d orientation = 3;
    
    // Usage as ground truth:
    // The two dimensional (flat) contour of the object. This is an extension of the concept of a 
    // bounding box as defined by Dimension3d. The contour is the projection of the object's outline 
    // onto the z-plane in the object frame (independent of its current position and orientation). 
    //
    // Usage as sensor data:
    // The polygon describes the visible part of the object's contour.
    //
    // General definitions:
    // The polygon is defined in the local object frame: x pointing forward and y to the left.
    // The origin is the center of the bounding box.
    // As ground truth, the polygon is closed by connecting the last with the first point. Therefore  
    // these two points must be different. The polygon must consist of at least three points.
    // As sensor data, however, the polygon is open.
    // The polygon is defined counter-clockwise.
    repeated Vector2d base_polygon = 4;
}

//
// \brief The base attributes of each object that is moving.
// 
// This includes the MovingObject messages.
//
message BaseMoving
{
    // The 3D dimension of the moving object (its bounding box).
    //
    optional Dimension3d dimension = 1;

    // The reference point for position and orientation: the center (x, y, z) of the bounding box.
    //
    optional Vector3d position = 2;

    // The relative orientation of the moving object w.r.t. its parent frame.
    //
    optional Orientation3d orientation = 3;

    // The relative velocity of the moving object w.r.t. its parent frame and parent velocity.
    // The velocity becomes global/absolute if the parent frame does not move.
    optional Vector3d velocity = 4;

    // The relative acceleration of the moving object w.r.t. its parent frame and parent acceleration.
    // The acceleration becomes global/absolute if the parent frame is not accelerating.
    optional Vector3d acceleration = 5;

    // The relative orientation rate of the moving object w.r.t. its parent frame and parent orientation rate in the center point of the bounding box.
    // The orientation rate becomes global/absolute if the parent frame is not rotating.
    optional Orientation3d orientation_rate = 6;
    
    // Usage as ground truth:
    // The two dimensional (flat) contour of the object. This is an extension of the concept of a 
    // bounding box as defined by Dimension3d. The contour is the projection of the object's outline 
    // onto the z-plane in the object frame (independent of its current position and orientation). 
    //
    // Usage as sensor data:
    // The polygon describes the visible part of the object's contour.
    //
    // General definitions:
    // The polygon is defined in the local object frame: x pointing forward and y to the left.
    // The origin is the center of the bounding box.
    // As ground truth, the polygon is closed by connecting the last with the first point. Therefore  
    // these two points must be different. The polygon must consist of at least three points.
    // As sensor data, however, the polygon is open.
    // The polygon is defined counter-clockwise.
    repeated Vector2d base_polygon = 7;    
}
