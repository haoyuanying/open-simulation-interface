syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";

package osi;

//
// \brief A traffic sign.
//
message TrafficSign
{
    // The ID of the traffic sign.
    //
    optional Identifier id = 1;

    // The base parameters of the traffic sign.
    //
    // The orientation of the bounding box \c TrafficSign::base.orientation is defined as:
    // \c BaseStationary::orientation z-axis is the vector from bottom to top of the traffic sign's image. 
    // (Normally it is equal to the ground truth z-axis.)
    // \c BaseStationary::orientation x-axis is view normal of the traffic sign's image. 
    // This x-axis points from the traffic sign's image in the direction from where a 'viewer' could see the traffic sign. 
    optional BaseStationary base = 2;

    // The type of the traffic sign.
    //
    optional Type type = 3;

    // Additional value associated with the traffic sign, e.g. value of the speed limit.
    // Field need not be set if traffic sign type does not require it. Speed (limits) should be given in km/h.
    optional double value = 4;

    // Unit for additional value.
    //
    optional Unit value_unit = 5;

    // Variability
    //
    optional Variability variability = 6;

    // Some traffic signs could have an additional arrow symbol as an additional constrain for the scope (e.g. no parking to the right). 
    // The arrow points to right resp. left from the viewpoint of a 'normal standing pedestrian' viewing the traffic sign's arrow.
    //
    // The definition for left and right: 
    // Build a fictive coord. system (right hand coord. system). 
    // z-axis of the fictive coord. system is equal to the GT z-axis.
    // x-axis of the fictive coord. system is like the view normal of the traffic sign (\c TrafficSign::base.orientation x-axis).
    // Right: direction of the fictive coord. system's y-axis.
    // Left: opposite direction of the fictive coord. system's y-axis i.e. -(y-axis),
    //
    // \note If the traffic sign lies on the ground (there is no definition for right or left). 
    // Normally this is a road marking and no traffic sign.
    optional DirectionScope direction_scope = 7;
    
    // Additional, supplementary signs, e.g. time limit, modifying the traffic sign.
    //
    repeated SupplementarySign supplementary_sign = 8;

    // The IDs of the lanes that the traffic sign is assigned to.
    // Might be multiple if the traffic sign is valid for multiple lanes.
    repeated Identifier assigned_lane = 9;

    // Definition of traffic sign types.
    // Numbers given according to German StVO.
    // 
    // For an overview see: 
    // \arg http://www.dvr.de/multimedia/downloads/verkehrszeichen.htm (Images)
    // \arg https://www.gesetze-im-internet.de/stvo_2013/anlage_1.html (Allgemeine und Besondere Gefahrenzeichen)
    // \arg https://www.gesetze-im-internet.de/stvo_2013/anlage_2.html (Vorschriftzeichen)
    // \arg https://www.gesetze-im-internet.de/stvo_2013/anlage_3.html (Richtzeichen)
    // \arg https://www.gesetze-im-internet.de/stvo_2013/anlage_4.html (Verkehrseinrichtungen)
    enum Type
    {
        // Type of traffic sign is unknown (must not be used in ground truth).
        //
        TYPE_UNKNOWN = 0;
        
        // Other (unspecified but known) type of traffic sign.
        //
        TYPE_OTHER = 1;
        
        // Start of speed limit (StVO 274).
        //
        TYPE_SPEED_LIMIT_BEGIN = 2;
        
        // End of speed limit (StVO 278).
        //
        TYPE_SPEED_LIMIT_END = 3;
        
        // Town entrance (StVO 310).
        //
        TYPE_TOWN_BEGIN = 4;
        
        // Town exit (StVO 311).
        //
        TYPE_TOWN_END = 5;
        
        // Start of zone with speed limit 30 (StVO 274.1).
        //
        TYPE_ZONE_30_BEGIN = 6;
        
        // End of zone with speed limit 30 (StVO 274.2).
        //
        TYPE_ZONE_30_END = 7;
        
        // Start of mandatory minimum speed (StVO 275).
        //
        TYPE_MINIMUM_SPEED_BEGIN = 8;
        
        // End of mandatory minimum speed (StVO 279).
        //
        TYPE_MINIMUM_SPEED_END = 9;
        
        // Start of area with calmed / reduced traffic (verkehrsberuhigter Bereich - StVO 325.1).
        //
        TYPE_TRAFFIC_CALMED_DISTRICT_BEGIN = 10;
        
        // End of area with calmed / reduced traffic (verkehrsberuhigter Bereich - StVO 325.2).
        //
        TYPE_TRAFFIC_CALMED_DISTRICT_END = 11;
        
        // Start of area without traffic to reduce harmful air pollution (StVO 270.1).
        //
        TYPE_ENVIRONMENTAL_ZONE_BEGIN = 12;
        
        // End of area without traffic to reduce harmful air pollution (StVO 270.2).
        //
        TYPE_ENVIRONMENTAL_ZONE_END = 13;
        
        // Start of overtaking ban (StVO 276).
        //
        TYPE_OVERTAKING_BAN_BEGIN = 14;
        
        // End of overtaking ban (StVO 280).
        //
        TYPE_OVERTAKING_BAN_END = 15;
        
        // Start of overtaking ban for trucks (StVO 277).
        //
        TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN = 16;
        
        // End of overtaking ban for trucks (StVO 281).
        //
        TYPE_OVERTAKING_BAN_FOR_TRUCKS_END = 17;
        
        // End of all speed and overtaking restrictions (StVO 282).
        //
        TYPE_ALL_RESTRICTIONS_END = 18;
        
        // Begin of priority road with right of way (StVO 306).
        //
        TYPE_RIGHT_OF_WAY_BEGIN = 19;
        
        // End of priority road with right of way (StVO 307).
        //
        TYPE_RIGHT_OF_WAY_END = 20;
        
        // Right of way at the next intersection (StVO 301).
        //
        TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION = 21;
        
        // "Right before left" rule at the next intersection (StVO 102).
        //
        TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION = 22;
        
        // Begin of no parking zone (StVO 290.1).
        //
        TYPE_NO_PARKING_ZONE_BEGIN = 23;
        
        // End of no parking zone (StVO 290.2).
        //
        TYPE_NO_PARKING_ZONE_END = 24;
        
        // No parking sign (StVO 286).
        //
        TYPE_NO_PARKING = 25;
        
        // No stopping sign (StVO 283).
        //
        TYPE_NO_STOPPING = 26;
        
        // Begin of parking zone (StVO 314.1).
        //
        TYPE_CAR_PARKING_ZONE_BEGIN = 27;

        // End of parking zone (StVO 314.2).
        //
        TYPE_CAR_PARKING_ZONE_END = 28;

        // Parking space (StVO 314).
        //
        TYPE_CAR_PARKING = 29;
        
        // Give way sign (StVO 205).
        //
        TYPE_GIVE_WAY = 30;
        
        // Stop sign (StVO 206).
        //
        TYPE_STOP = 31;
        
        // Danger sign (StVO 101).
        //
        TYPE_DANGER_SPOT = 32;
        
        // Road works sign (StVO 123)
        //
        TYPE_ROAD_WORKS = 33;
        
        // Steep hill downwards (StVO 108).
        //
        TYPE_HILL_DOWNWARDS = 34;
        
        // Steep hill upwards (StVO 110).
        //
        TYPE_HILL_UPWARDS = 35;
        
        // Prescribed left turn (StVO 209.1).
        //
        TYPE_PRESCRIBED_LEFT_TURN = 36;
        
        // Prescribed right turn (StVO 209.2).
        //
        TYPE_PRESCRIBED_RIGHT_TURN = 37;
        
        // Prescribed driving straight ahead (StVO 209.3).
        //
        TYPE_PRESCRIBED_STRAIGHT = 38;
        
        // Prescribed left way (StVO 211.1).
        //
        TYPE_PRESCRIBED_LEFT_WAY = 39;
        
        // Prescribed right way (StVO 211.2).
        //
        TYPE_PRESCRIBED_RIGHT_WAY = 40;
        
        // Prescribed left turn and driving straight ahead (StVO 214.1).
        //
        TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT = 41;
        
        // Prescribed right turn and driving straight ahead (StVO 214.2).
        //
        TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT = 42;
        
        // Prescribed left and right turn (StVO 214.3).
        //
        TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN = 43;

        // Prescribed left turn, right turn and driving straight ahead (required for logical signs as road marking).
        //
        TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT = 44;

        // One-way road to the left (StVO 220.1).
        //
        TYPE_ONEWAY_LEFT = 45;

        // One-way road to the right (StVO 220.2).
        //
        TYPE_ONEWAY_RIGHT = 46;

        // No U turn left (StVO 272).
        //
        TYPE_NO_U_TURN_LEFT = 47;

        // No U turn right ().
        //
        TYPE_NO_U_TURN_RIGHT = 48;

        // Prescribed U turn left ().
        //
        TYPE_PRESCRIBED_U_TURN_LEFT = 49;

        // Prescribed U turn right ().
        //
        TYPE_PRESCRIBED_U_TURN_RIGHT = 50;

        // Left lane limitation or end of left lane (StVO 531.2x). 
        //
        TYPE_ANNOUNCE_LEFT_LANE_END = 51;

        // Right lane limitation or end of right lane (StVO 531.1x). 
        //
        TYPE_ANNOUNCE_RIGHT_LANE_END = 52;

        // Entry not allowed (StVO 267).
        //
        TYPE_DO_NOT_ENTER = 53;

        // Roundabout (StVO 215).
        //
        TYPE_ROUNDABOUT = 54;

        // Bus only lane begin. 
        //
        TYPE_BUS_LANE_BEGIN = 55;

        // Bus only lane end (). 
        //
        TYPE_BUS_LANE_END = 56;
        
        // Entry prohibited for all vehicle types (StVO 250).
        //
        TYPE_PROHIBITED_FOR_ALL = 57;
        
        // Entry prohibited for all motor vehicles (StVO 251).
        //
        TYPE_PROHIBITED_FOR_MOTOR_VEHICLES = 58;
        
        // Entry prohibited for trucks (StVO 253).
        //
        TYPE_PROHIBITED_FOR_TRUCKS = 59;
        
        // Entry prohibited for bicycles (StVO 254).
        //
        TYPE_PROHIBITED_FOR_BICYCLES = 60;
        
        // Entry prohibited for motor bikes (StVO 255).
        //
        TYPE_PROHIBITED_FOR_MOTOR_BIKES = 61;
        
        // Entry prohibited for pedestrians (StVO 259).
        //
        TYPE_PROHIBITED_FOR_PEDESTRIANS = 62;
        
        // Entry prohibited for all motor vehicles and bikes (StVO 260).
        //
        TYPE_PROHIBITED_FOR_MOTOR_VEHICLES_BIKES = 63;
        
        // Begin of highway (StVO 330.1).
        //
        TYPE_HIGHWAY_BEGIN = 64;
        
        // End of highway (StVO 330.2).
        //
        TYPE_HIGHWAY_END = 65;
        
        // Highway exit sign (StVO 333).
        //
        TYPE_HIGHWAY_EXIT = 66;
        
        // Pole indicating highways exit in e.g. 100m (StVO 450). See additional value and its unit.
        //
        TYPE_POLE_EXIT = 67;
        
        // Pole for warning and guiding purposes (red/white stripes - StVO 605).
        //
        TYPE_POLE_WARNING = 68;
        
        // Begin of expressway for motor vehicles (StVO 331.1).
        //
        TYPE_EXPRESSWAY_BEGIN = 69;
        
        // End of expressways for motor vehicles (StVO 331.2).
        //
        TYPE_EXPRESSWAY_END = 70;
                
        // Priority must be given to vehicles from the opposite direction (StVO 208).
        //
        TYPE_PRIORITY_TO_OPPOSITE_DIRECTION = 71;
        
        // Traffic has priority over vehicles from the opposite direction (StVO 308).
        //
        TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION = 72;
        
        // Priority must be given to vehicles from the opposite direction (StVO 208). Upside down.
        // 
        TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN = 73;
        
        // Traffic has priority over vehicles from the opposite direction (StVO 308). Upside down.
        //
        TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN = 74;
        
        // Minimum safety distance for trucks (StVO 273).
        //
        TYPE_MINIMUM_DISTANCE_FOR_TRUCKS = 75;
        
        // Traffic light ahead sign (StVO 131).
        //
        TYPE_ATTENTION_TRAFFIC_LIGHT = 76;
        
        // Pedestrian crossing (StVO 350).
        //
        TYPE_PEDESTRIAN_CROSSING_INFO = 77;
        
        // Warning sign for a left turn (StVO 103.1).
        //
        TYPE_TURN_LEFT = 78;
        
        // Warning sign for a right turn (StVO 103.2).
        //
        TYPE_TURN_RIGHT = 79;
        
        // Warning sign for a double turn (first left turn) (StVO 105.1).
        //
        TYPE_DOUBLE_TURN_LEFT = 80;
        
        // Warning sign for a double turn (first right turn) (StVO 105.2).
        //
        TYPE_DOUBLE_TURN_RIGHT = 81;
        
        // Drive past on the left side (StVO 222.1).
        //
        TYPE_PASS_LEFT = 82;
        
        // Drive past on the right side (StVO 222.2).
        //
        TYPE_PASS_RIGHT = 83;
    }

    // Definition of the variability of the traffic sign.
    //
    enum Variability
    {
        // Variability type of sign is unknown (must not be used in ground truth).
        //
        VARIABILITY_UNKNOWN = 0;
        
        // Other (unspecified but known) variability.
        //
        VARIABILITY_OTHER = 1;
        
        // Fixed sign, i.e. always present.
        //
        VARIABILITY_FIXED = 2;
        
        // Temporary or variable sign, e.g. on a sign bridge.
        //
        VARIABILITY_VARIABLE = 3;
    }

    // Definition of the direction of the traffic sign's scope.
    // Marked with additional arrows.
    enum DirectionScope
    {
        // Direction of the sign's scope is unknown (must not be used in ground truth).
        //
        DIRECTION_SCOPE_UNKNOWN = 0;
        
        // Other (unspecified but known) direction of the sign's scope.
        //
        DIRECTION_SCOPE_OTHER = 1;
        
        // Direction of the sign's scope is not specified.
        //
        DIRECTION_SCOPE_NO_DIRECTION = 2;
        
        // Direction of the sign's scope for viewer is left.
        //
        DIRECTION_SCOPE_LEFT = 3;
        
        // Direction of the sign's scope for viewer is right.
        //
        DIRECTION_SCOPE_RIGHT = 4;
        
        //  Direction of the sign's scope for viewer is to both sides.
        //
        DIRECTION_SCOPE_LEFT_RIGHT = 5;
    }
    
    // Unit for values on traffic signs
    //
    enum Unit
    {
        // Unit of the sign's value is unknown (must not be used in ground truth).
        //
        UNIT_UNKNOWN = 0;

        // Other (unspecified but known) uUnit of the sign's value.
        //
        UNIT_OTHER = 1;

        // Value without unit.
        // Unit []
        UNIT_NO_UNIT = 2;

        // Velocity 
        // Unit [km/h]
        UNIT_KILOMETER_PER_HOUR = 3;

        // Velocity 
        // Unit [mph]
        //
        UNIT_MILE_PER_HOUR = 4;

        // Length
        // Unit [m]
        UNIT_METER = 5;

        // Length
        // Unit [km]
        UNIT_KILOMETER = 6;

        // Length
        // Unit [ft]
        UNIT_FEET = 7;

        // Length
        // Unit [mile]
        UNIT_MILE = 8;

        // Weight
        // Unit [t]
        UNIT_METRIC_TON = 9;

        // Weight 
        // Long ton UK 1,016.047 kg
        // Unit [tn. l.]
        UNIT_LONG_TON = 10;

        // Weight 
        // Short ton USA 907.1847 kg
        // Unit [tn. sh.]
        UNIT_SHORT_TON = 11;

        // Time of day 
        // Hour since midnight
        // Unit [min]
        UNIT_MINUTES = 12;

        // Day of the week 
        // Days since monday. Monday = 0; Tuesday = 1; ...
        // Unit []
        UNIT_DAY = 13;

        // Percentage
        // Unit [%]
        UNIT_PERCENTAGE = 14;
    }
}

//
// \brief Additional, supplementary sign modifying a parent traffic sign.
//
message SupplementarySign
{
    // Type of the supplementary sign.
    //
    optional Type type = 1;

    // Optional first value defining additional properties, e.g. length, mass, or starting time in time range.
    //
    optional double value_1 = 2;

    // Unit for first optional value.
    //
    optional TrafficSign.Unit value_1_unit = 3;

    // Optional second value defining additional properties, e.g. end time in time range.
    //
    optional double value_2 = 4;

    // Unit for second optional value.
    //
    optional TrafficSign.Unit value_2_unit = 5;

    // Optional third value defining additional properties, e.g. day of the week start.
    //
    optional double value_3 = 6;

    // Unit for third optional value.
    //
    optional TrafficSign.Unit value_3_unit = 7;

    // Optional fourth value defining additional properties, e.g. day of the week end.
    //
    optional double value_4 = 8;

    // Unit for fourth optional value.
    //
    optional TrafficSign.Unit value_4_unit = 9;

    // Defines the position to the supplementary sign
    // 
    optional Position position_supplementary = 10;

    // Definition of supplementary sign types.
    // See TrafficSign.Type for further information.
    enum Type
    {
        // Type of supplementary sign is unknown (must not be used in ground truth).
        //
        TYPE_UNKNOWN = 0;
        
        // Other (unspecified but known) type of supplementary sign.
        //
        TYPE_OTHER = 1;
        
        // There is no supplementary sign (must not be used in ground truth).
        //
        TYPE_NO_SIGN = 2;
        
        // Traffic sign is valid for a certain distance (given by value_1 in meter).
        //
        TYPE_VALID_FOR_DISTANCE = 3;
        
        // Distance to the start of validity of the traffic sign (given by value_1 in meter).
        //
        TYPE_VALID_IN_DISTANCE = 4;
        
        // Time range for validity of traffic sign (starting from value_1 and ending with value_2, both defining
        // time of day in minutes from midnight).
        TYPE_TIME_RANGE = 5;
        
        // Restriction of the validity of the traffic sign depending on the vehicle's weight (more than value_1 in kilogram).
        //
        TYPE_WEIGHT = 6;
        
        // Restriction of the validity of the traffic sign to wet / rainy conditions.
        //
        TYPE_RAIN = 7;
        
        // Restriction of the validity of the traffic sign to foggy conditions.
        //
        TYPE_FOG = 8;
        
        // Restriction of the validity of the traffic sign to snowy / icy conditions.
        //
        TYPE_SNOW = 9;
        
        // Combined restriction of the validity of the traffic sign to rainy or snowy conditions denoted by a single
        // supplementary sign (instead of two signs of TYPE_WET and TYPE_SNOW respectively).
        TYPE_SNOW_RAIN = 10;
        
        // Direction, left-pointing.
        //
        TYPE_LEFT_ARROW = 11;
        
        // Direction, right-pointing.
        //
        TYPE_RIGHT_ARROW = 12;
        
        // Direction of potential danger, left-pointing.
        //
        TYPE_LEFT_BEND_ARROW = 13;
        
        // Direction of potential danger, right-pointing.
        //
        TYPE_RIGHT_BEND_ARROW = 14;
        
        // Valid for heavy trucks.
        //
        TYPE_TRUCK = 15;
        
        // Passing, only tractors allowed.
        //
        TYPE_TRACTORS_MAY_BE_PASSED = 16;
        
        // Hazardous.
        //
        TYPE_HAZARDOUS = 17;
        
        // Valid for trailer.
        //
        TYPE_TRAILER = 18;
        
        // Valid at night.
        //
        TYPE_NIGHT = 19;
        
        // Zone.
        //
        TYPE_ZONE = 20;
        
        // Stop 4 way.
        //
        TYPE_STOP_4_WAY = 21;
        
        // Valid for motorcycle.
        //
        TYPE_MOTORCYCLE = 22;
        
        // Only motorcycle allowed.
        //
        TYPE_MOTORCYCLE_ALLOWED = 23;
        
        // Valid for cars.
        //
        TYPE_CAR = 24;
        
        // Ends in X meter.
        //
        TYPE_STOP_IN = 25;
    }

    // The position of the supplementary sign.
    //
    enum Position 
    {
        // Position of supplementary sign is unknown (must not be used in ground truth).
        //
        POSITION_UNKNOWN = 0;
        
        // Supplementary sign is above the sign.
        //
        POSITION_ABOVE = 1;

        // Supplementary sign is left of the sign.
        //
        POSITION_LEFT = 2;

        // Supplementary sign is right of the sign.
        //
        POSITION_RIGHT = 3;

        // Supplementary sign is under the sign.
        //
        POSITION_UNDER = 4;
    }
}

//
// \brief A traffic light.
//
message TrafficLight
{
    // The ID of the traffic light.
    //
    optional Identifier id = 1;

    // The base parameters of the traffic light.
    //
    optional BaseStationary base = 2;

    // The type of the traffic light.
    //
    optional Type type = 3;

    // The shape of the traffic light.
    //
    optional Shape shape = 4;

    // The state of the traffic light.
    //
    optional LightState light_state = 5;

    // Presence of a green arrow sign for right turns on the traffic light.
    //
    optional GreenArrowPresence green_arrow = 6;

    // The IDs of the lanes that the traffic light is assigned to.
    // Might be multiple if the traffic light is valid for multiple driving lanes.
    repeated Identifier assigned_lane = 7;

    // Definition of traffic light types.
    //
    enum Type
    {
        // Unknown type of traffic light (must not be used in ground truth).
        //
        TYPE_UNKNOWN = 0;
        
        // Other (unspecified but known) type of traffic light.
        //
        TYPE_OTHER = 1;
        
        // Normal traffic light for motor vehicle traffic.
        //
        TYPE_NORMAL = 2;
        
        // Light for pedestrian traffic.
        //
        TYPE_PEDESTRIAN = 3;
        
        // Light for bicycle traffic.
        //
        TYPE_BICYCLE = 4;
    }

    // Definition of traffic light shapes.
    //
    enum Shape
    {
        // Unknown shape of traffic light (must not be used in ground truth).
        //
        SHAPE_UNKNOWN = 0;
        
        // Other (unspecified but known) shape of traffic light.
        //
        SHAPE_OTHER = 1;
        
        // This is a normal traffic light without specification of direction.
        //
        SHAPE_CIRCULAR = 2;
        
        // This traffic light applies to the lane straight ahead.
        //
        SHAPE_ARROW_STRAIGHT = 3;
        
        // This traffic light applies to left turns.
        //
        SHAPE_ARROW_LEFT = 4;
        
        // This traffic light applies to diagonal left turns.
        //
        SHAPE_ARROW_DIAG_LEFT = 5;
        
        // This traffic light applies to a lane allowing to drive straight ahead or to turn left.
        //
        SHAPE_ARROW_STRAIGHT_LEFT = 6;
        
        // This traffic light applies to right turns.
        //
        SHAPE_ARROW_RIGHT = 7;
        
        // This traffic light applies to diagonal right turns.
        //
        SHAPE_ARROW_DIAG_RIGHT = 8;
        
        // This traffic light applies to a lane allowing to drive straight ahead or to turn right.
        //
        SHAPE_ARROW_STRAIGHT_RIGHT = 9;
        
        // This traffic light applies to a lane allowing to turn left or right.
        //
        SHAPE_ARROW_LEFT_RIGHT = 10;
        
        // This traffic light indicates that the assigned lane is open for driving.
        //
        SHAPE_ARROW_DOWN = 11;
        
        // This traffic light indicates a necessary lane change to the left ahead.
        //
        SHAPE_ARROW_DOWN_LEFT = 12;
        
        // This traffic light indicates a necessary lane change to the right ahead.
        //
        SHAPE_ARROW_DOWN_RIGHT = 13;
        
        // This traffic light indicates that the assigned lane is not open for driving.
        //
        SHAPE_ARROW_CROSS = 14;
    }

    //
    // \brief Definition of light state for traffic lights.
    // 
    // This containes the logical information about the traffic light and NOT a description of individual light bulbs.
    //
    message LightState
    {
        // The color of the traffic light.
        //
        optional Color color = 1;
        
        // The operating mode of the traffic light.
        //
        optional Mode mode = 2;
        
        // Definition of colors for traffic lights.
        //
        enum Color
        {
            // Color is unknown (must not be used in ground truth).
            //
            COLOR_UNKNOWN = 0;
            
            // Other (unspecified but known) color.
            //
            COLOR_OTHER = 1;
            
            // Traffic light is off / not active. In this case mode must also be set to MODE_OFF.
            //
            COLOR_OFF = 2;
            
            // Red light is on.
            //
            COLOR_RED = 3;
            
            // Red and yellow light are on at the same time.
            //
            COLOR_RED_YELLOW = 4;
            
            // Yellow light is on.
            //
            COLOR_YELLOW = 5;
            
            // Green light is on.
            //
            COLOR_GREEN = 6;
        }

        // Definition of light modes for traffic lights.
        //
        enum Mode
        {
            // Mode is unknown (must not be used in ground truth).
            //
            MODE_UNKNOWN = 0;
            
            // Other (unspecified but known) mode.
            //
            MODE_OTHER = 1;
            
            // Traffic light is off / not active. In this case color must also be set to COLOR_OFF.
            //
            MODE_OFF = 2;
            
            // Light is on normally.
            //
            MODE_CONSTANT = 3;
            
            // Light is blinking.
            //
            MODE_BLINKING = 4;
        }
    }

    // Definition of states for the presence of a green arrow sign for right turns.
    //
    enum GreenArrowPresence
    {
        // Presence of green arrow sign is unknown (must not be used in ground truth).
        //
        GREEN_ARROW_UNKNOWN = 0;
        
        // Other (unspecified but known) green arrow sign.
        //
        GREEN_ARROW_OTHER = 1;
        
        // No green arrow sign present.
        //
        GREEN_ARROW_NOT_PRESENT = 2;
        
        // Green arrow sign present.
        //
        GREEN_ARROW_PRESENT = 3;
    }
}

//
// \brief A road surface marking.
// 
// Lane Markings are excluded and defined as LaneBoundaries as part of the Lanes.
//
message RoadMarking
{
    // The ID of the road marking.
    //
    optional Identifier id = 1;

    // The base parameters of the road marking.
    //
    // The orientation of the bounding box \c RoadMarking::base.orientation is defined as:
    // \c BaseStationary::orientation z-axis is the vector from 'bottom' to 'top' of the road marking's (i.e. painted traffic sign) image. 
    // (Normally it is in the ground truth xy-plain.)
    // \c BaseStationary::orientation x-axis is view normal of the road markings's image. 
    // Normally this x-axis points to the sky.
    // 
    // \note In case of a unidirectional valid road marking, if the road marking is assigned to the 
    // host vehicle lane and the driving direction of the host vehice
    // is 'equal' to the \c RoadMarking::base.orientation z-axis than the 'driver' has to regard the road marking.
    optional BaseStationary base = 2;

    // The type of the road marking.
    //
    optional Type type = 3;
    
    // Traffic sign as road marking (colour image, monochrome image or character string).
    //
    // \note Field is set if ( \c RoadMarking.type == \c RoadMarking.Type.TYPE_PAINTED_TRAFFIC_SIGN or 
    // \c RoadMarking.Type.TYPE_SYMBOLIC_TRAFFIC_SIGN or \c RoadMarking.Type.TYPE_TEXTUAL_TRAFFIC_SIGN ).
    //
    // \note Field need not be set (or set to \c TrafficSign.Type.TYPE_OTHER)
    // if road marking type (\c RoadMarking.type) does not require it.
    optional TrafficSign.Type traffic_sign_type = 4;

    // The monochrome color of the road marking.
    // \note Field need not be set (or set to \c RoadMarking.Color.COLOR_OTHER) 
    // if road marking type does not require it (e.g. for \c RoadMarking.type == \c RoadMarking.Type.TYPE_PAINTED_TRAFFIC_SIGN).
    optional Color monochrome_color = 5;

    // Additional value associated with the road marking, e.g. value of the speed limit.
    // \note Field need not be set if road marking type does not require it.
    optional double value = 6;

    // Unit for optional value.
    //
    optional TrafficSign.Unit value_unit = 7;
    
    // Additional text value as road marking, e.g. BUS, TAXI etc.
    // \note Field need not be set if road marking type does not require it.
    optional string value_text = 8;

    // The id(s) of the lane(s) that the road marking is assigned to.
    // Might be multiple if the road marking goes across multiple lanes.
    repeated Identifier assigned_lane = 9;

    // Intersection orientation of the road marking.
    //
    // \note Defined for \c Lane::type = TYPE_INTERSECTION, otherwise zero vector
    optional Vector3d roadmarking_orientation = 10;

    // Definition of road marking types.
    //
    enum Type
    {
        // Type of road marking is unknown (must not be used in ground truth).
        //
        TYPE_UNKNOWN = 0;
        
        // Other (unspecified but known) type of road marking.
        //
        TYPE_OTHER = 1;
        
        // Paint on the road surface indicating a colour image of a traffic sign.
        //
        TYPE_PAINTED_TRAFFIC_SIGN = 2;
        
        // Paint on the road surface indicating a monochrome logical symbol of a traffic sign (e.g. digits 50 as start of speed limit 50 or stop line for stop sign).
        //
        TYPE_SYMBOLIC_TRAFFIC_SIGN = 3;
        
        // Paint on the road surface as a character string (e.g. BUS as bus only lane).
        //
        TYPE_TEXTUAL_TRAFFIC_SIGN = 4;
        
        // Paint on the road surface indicating a generic symbol.
        //
        TYPE_GENERIC_SYMBOL = 5;
        
        // Paint on the road surface indicating a generic line.
        //
        TYPE_GENERIC_LINE = 6;
        
        // Paint on the road surface indicating a generic character string.
        //
        TYPE_GENERIC_TEXT = 7;
    }

    // Definition of road marking colors
    //
    enum Color
    {
        // Color of road marking is unknown (must not be used in ground truth).
        //
        COLOR_UNKNOWN = 0;
        
        // Marking with another (unspecified but known) color.
        //
        COLOR_OTHER = 1;
        
        // Marking with white color.
        //
        COLOR_WHITE = 2;
        
        // Marking with yellow / orange-yellow color.
        //
        COLOR_YELLOW = 3;
        
        // Marking with blue color.
        //
        COLOR_BLUE = 5;

        // Marking with red color.
        //
        COLOR_RED = 6;

        // Marking with green color.
        //
        COLOR_GREEN = 7;

        // Marking with violet color.
        //
        COLOR_VIOLET = 8;
    }
}
